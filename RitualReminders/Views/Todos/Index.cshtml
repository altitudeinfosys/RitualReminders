@using RitualReminders.Models
@model IEnumerable<RitualReminders.Models.Todo>
@*
    Note: I've set the model for this view to IEnumerable<Customer>.
    This is a simple interface implemented by the list class. Since
    in this view we only want to iterate over this list, and we don't
    need any of the operations in the List class (eg Add, Remove, etc),
    it's better to use the IEnumerable interface, which allows use to
    iterate over the list. If in the future, we replace the List with a
    different data structure, as long as it is enumerable, our view code
    will remain unchanged.
*@

@{
    ViewBag.Title = "Todos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Todos</h2>
<p>
    @Html.ActionLink("New Todo", "New", "Todos", null, new { @class = "btn btn-primary" })
</p>

<table id="todos" class="table table-bordered table-hover">
    <thead>
    <tr>
        <th>Title</th>
        <th>Completed</th>
        <th>Due Date</th>
        <th>Created Date</th>
        <th>Last Update Date</th>
        <th>Delete</th>
    </tr>
    </thead>
    <tbody>
    </tbody>
</table>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    

    <script>
        var userName = '@HttpContext.Current.User.Identity.Name';
        $(document).ready(function() {
            var table = $('#todos').DataTable({
                ajax: {
                    url: "/api/todos",                    
                    dataSrc: "",
                    data: {
                        "userName": userName
                    }
                },
                columns: [
                    { // column 1
                        data: "title",
                        render: function(data, type, todo) {
                            return "<a href='/Todos/Details/" + todo.toDoId + "'>" + todo.title + "</a>";
                        }
                    },
                    { // column 2
                        data: "completed",
                        render: function(data) {
                            if (data)
                                return "Well DONE!";
                            else
                                return "Not YET Completed!";
                        }
                    },
                    {
                        //column 4
                        data: "dueDate",
                        render: function(data, type, row) {
                            // If display or filter data is requested, format the date
                            if (type === 'display' || type === 'filter') {
                                if (data == null)
                                    return "";
                                else
                                    return "<b>" + (moment(data).format("ddd DD/MM/YYYY (HH:mm)")) + "</b>";
                                /*var rowvalue = row["EventDate"];
                                var rowvalueallday = row["AllDayEvent"];
                                if (rowvalueallday == 0) {
                                    return (moment(data).format("ddd DD/MM/YYYY"));

                                } else {
                                    return (moment(data).format("ddd DD/MM/YYYY (HH:mm)"));
                                }*/
                            }
                            // Otherwise the data type requested (`type`) is type detection or
                            // sorting data, for which we want to use the raw date value, so just return
                            // that, unaltered
                            return data;
                        }

                    },
                    {
                        //column 4
                        data: "createDate",
                        render: function(data, type, row) {
                            // If display or filter data is requested, format the date
                            if (type === 'display' || type === 'filter') {
                                if (data == null)
                                    return "";
                                else
                                    return (moment(data).format("ddd DD/MM/YYYY (HH:mm)"));
                                /*var rowvalue = row["EventDate"];
                                var rowvalueallday = row["AllDayEvent"];
                                if (rowvalueallday == 0) {
                                    return (moment(data).format("ddd DD/MM/YYYY"));

                                } else {
                                    return (moment(data).format("ddd DD/MM/YYYY (HH:mm)"));
                                }*/
                            }
                            // Otherwise the data type requested (`type`) is type detection or
                            // sorting data, for which we want to use the raw date value, so just return
                            // that, unaltered
                            return data;
                        }

                    },
                    {
                        //column 5
                        data: "updateDate",
                        render: function(data, type, row) {
                            // If display or filter data is requested, format the date
                            if (type === 'display' || type === 'filter') {
                                if (data == null)
                                    return "";
                                else
                                    return (moment(data).format("ddd DD/MM/YYYY (HH:mm)"));
                                /*var rowvalue = row["EventDate"];
                                var rowvalueallday = row["AllDayEvent"];
                                if (rowvalueallday == 0) {
                                    return (moment(data).format("ddd DD/MM/YYYY"));

                                } else {
                                    return (moment(data).format("ddd DD/MM/YYYY (HH:mm)"));
                                }*/
                            }
                            // Otherwise the data type requested (`type`) is type detection or
                            // sorting data, for which we want to use the raw date value, so just return
                            // that, unaltered
                            return data;
                        }

                    },
                    {
                        //column 6 - to render the button 
                        data: "todoId",
                        render: function(data, type, todo) {
                            return "<button class='btn-link js-delete' data-todo-id='" +
                                todo.toDoId +
                                "'>Delete</button>";
                        }
                    }
                ]
            });

            $("#todos").on("click",
                ".js-delete",
                function() {
                    var button = $(this);
                    var r = confirm("Press a button!");
                    if (r) {
                        $.ajax({
                            url: "/api/todos/" + button.attr("data-todo-id"),
                            method: "DELETE",
                            success: function() {
                                table.row(button.parents("tr")).remove().draw();
                            }
                        });
                    }
                });
        });


    </script>

}
